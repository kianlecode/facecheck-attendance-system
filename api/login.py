from fastapi import APIRouter, HTTPException, Request
from fastapi.exceptions import HTTPException as FastAPIHTTPException  # ƒë·ªÉ kh√¥ng nu·ªët l·ªói
from pydantic import BaseModel
from models.db import get_db_connection
import bcrypt

router = APIRouter()

class LoginRequest(BaseModel):
    user_id: str
    password: str

@router.post("/login")
def login(request_data: LoginRequest, request: Request):
    user_id = request_data.user_id.strip()
    password = request_data.password.strip()

    if not user_id or not password:
        raise HTTPException(status_code=400, detail="‚ö† M√£ ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT name, password, role, is_active
            FROM users
            WHERE user_id = ?
        """, (user_id,))
        row = cursor.fetchone()

        if not row:
            raise HTTPException(status_code=404, detail="‚ö† T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")

        name = row[0]
        hashed_password = row[1]
        role = row[2]
        is_active = row[3]

        if not bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8')):
            raise HTTPException(status_code=401, detail="‚ö† T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")

        if is_active == 0:
            raise HTTPException(status_code=403, detail="‚ö† T√†i kho·∫£n ƒë√£ b·ªã kho√°. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")

        return {
            "success": True,
            "message": "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
            "user_id": user_id,
            "user_name": name,
            "role": role
        }

    except FastAPIHTTPException as he:
        raise he  # ‚ùó Cho ph√©p HTTPException ƒë∆∞·ª£c tr·∫£ ra ƒë√∫ng status
    except Exception as e:
        print("üõë L·ªñI LOGIN:", e)
        raise HTTPException(status_code=500, detail="L·ªói h·ªá th·ªëng ƒëƒÉng nh·∫≠p.")
    finally:
        conn.close()